var limit = function(array, length) {
  return array.slice(0, length)
}
// utc时间转当地时间
function utcToBj(utcDateTime, format = 'Y/M/D h:m:s') {
  var date = getDate()
  var min = date.getTimezoneOffset()
  var time = min * 60 * 1000

  // utc时间对象
  var utcDate = getDate(utcDateTime)
  var utcTime = utcDate.getTime()
  var bjTime = utcTime - time
  var bjDateTime = formatTime(bjTime, format); //转换为日期
  return bjDateTime
}

/** 
 * 时间戳转化为年 月 日 时 分 秒 
 * number: 传入时间戳 
 * format：返回格式，支持自定义，但参数必须与formateArr里保持一致 
 */
function formatTime(number, format) {
  var formateArr = ['Y', 'M', 'D', 'h', 'm', 's'];
  var returnArr = [];

  var date = getDate(number);
  returnArr.push(date.getFullYear());
  returnArr.push(formatNumber(date.getMonth() + 1));
  returnArr.push(formatNumber(date.getDate()));

  returnArr.push(formatNumber(date.getHours()));
  returnArr.push(formatNumber(date.getMinutes()));
  returnArr.push(formatNumber(date.getSeconds()));

  for (var i = 0; i < returnArr.length; i++) {
    format = format.replace(formateArr[i], returnArr[i]);
  }
  return format;
}

function formatNumber(n) {
  n = n.toString()
  return n[1] ? n : '0' + n
}

/**
 * 处理字符串为*格式，中间显示自定义*号
 * str 需要处理的字符串
 * startLength 前面显示的字符串长度
 * endLength 后面显示的字符串长度
 */
var sub = function (str, startLength, endLength) {
  if (str.length == 0 || str == undefined) {
    return "";
  }
  var length = str.length;
  if (length >= startLength + endLength) {
    //判断当字符串长度为二时,隐藏末尾
    if (length === 2) {

      return str.substring(0, 1) + '*';
    }
    else if (3 <= length && length <= 10) {

      return str.substring(0, 1) + '**';
    }
    //判断字符串长度大于首尾字符串长度之和时,隐藏中间部分
    else if (length >= 11) {

      return str.substring(0, startLength) + "****" + str.substring(length - endLength, length);
    } else {

      return str
    }
  }else{
    return str
  }
}

module.exports = {
  limit: limit,
  utcToBj: utcToBj,
  sub: sub
}